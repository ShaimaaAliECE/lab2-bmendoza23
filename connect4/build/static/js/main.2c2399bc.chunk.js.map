{"version":3,"sources":["C4.js","index.js"],"names":["C4Button","disabled","this","props","style","onClick","React","Component","Grid","state","player","win","boardFull","displayMsg","gameBoard","nulls","hors","board","verts","currentPlayer","r","c","btnGrid","push","e","target","backgroundColor","newBoard","setState","boardScan","alert","renderButtons","ReactDOM","render","document","getElementById"],"mappings":"gNAIMA,E,4JAEJ,WAEE,OACI,wBACEC,SAAeC,KAAKC,MAAMF,SAC1BG,MAAeF,KAAKC,MAAMC,MAC1BC,QAAeH,KAAKC,MAAME,c,GARbC,IAAMC,WA4KdC,E,kDA1Jb,WAAYL,GACX,IAAD,8BACE,cAAMA,IACDM,MAAQ,CACXC,OAAQ,MACRC,KAAK,EACLC,WAAW,EACXC,WAAY,GACZC,UAAU,CACR,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAC/B,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAC/B,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAC/B,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAC/B,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAC/B,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,QAbrC,E,6CAmBA,WAME,IALA,IACIC,EAAOC,EADPC,EAAQf,KAAKO,MAAMK,UACNI,EAAQ,EACrBC,EAAgBjB,KAAKO,MAAMC,OAGtBU,EAAI,EAAGA,EAAE,EAAGA,IAEnB,IAAK,IAAIC,EAAI,EAAGA,EAAE,EAAGA,IAEA,OAAhBJ,EAAMG,GAAGC,IACVN,IAGa,KAAXA,IACFb,KAAKO,MAAMG,WAAY,GAM7B,IAAI,IAAIS,EAAI,EAAGA,EAAG,EAAGA,IACnB,IAAK,IAAID,EAAI,EAAGA,EAAI,EAAGA,IAED,OAAhBH,EAAMG,GAAGC,IAEXH,EAAQ,EACRC,EAAgB,MACPF,EAAMG,GAAGC,KAAOF,EACzBD,KAEAA,EAAQ,EACRC,EAAgBF,EAAMG,GAAGC,IAIxBH,GAAQ,IAEThB,KAAKO,MAAME,KAAM,GAMvB,IAAI,IAAIS,EAAI,EAAGA,EAAG,EAAGA,IAEnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAED,OAAhBJ,EAAMG,GAAGC,IAEXL,EAAO,EACPG,EAAgB,MACPF,EAAMG,GAAGC,KAAOF,EACzBH,KAEAA,EAAO,EACPG,EAAgBF,EAAMG,GAAGC,IAIxBL,GAAO,IAERd,KAAKO,MAAME,KAAM,K,2BASzB,WAII,IAJY,IAAD,OAEPW,EAAU,GAFH,WAIHF,GAEN,IANS,eAMDC,GACNC,EAAQC,KACR,cAAC,EAAD,CAIEtB,SAAY,EAAKQ,MAAMG,WAAa,EAAKH,MAAME,IAE/CN,QAAY,SAACmB,GAEXA,EAAEC,OAAOrB,MAAMsB,gBAAkB,EAAKjB,MAAMC,OAE5Cc,EAAEC,OAAOxB,UAAW,EAGlB,IAAI0B,EAAW,EAAKlB,MAAMK,UAC1Ba,EAASP,GAAGC,GAAK,EAAKZ,MAAMC,OAC5B,EAAKkB,SAAS,CAACd,UAAWa,IAG5B,EAAKE,YAGF,EAAKpB,MAAME,KAEZmB,MAAM,cAAgB,EAAKrB,MAAMC,OAAS,UAGzC,EAAKD,MAAMG,WAEZkB,MAAM,mDAIR,EAAKF,SACH,CAAClB,OAA8B,QAAtB,EAAKD,MAAMC,OAAmB,SAAW,UA/BjDU,EAAI,IAAMC,KAJXA,EAAI,EAAGA,EAAE,EAAGA,IAAK,EAAjBA,GA0CRC,EAAQC,KAAK,sBAAWH,EAAI,QA5CtBA,EAAI,EAAGA,EAAE,EAAGA,IAAK,EAAjBA,GA8CR,OAAOE,I,oBAIX,WAEE,OACE,8BACGpB,KAAK6B,sB,GAxJKzB,IAAMC,WCZzByB,IAASC,OACP,gCACE,8DACA,uBACA,cAAC,EAAD,OAGFC,SAASC,eAAe,W","file":"static/js/main.2c2399bc.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\n// Creating C4Button class\nclass C4Button extends React.Component\n{ \n  render()  \n  { \n    return (\n        <button\n          disabled    = {this.props.disabled} \n          style       = {this.props.style}\n          onClick     = {this.props.onClick}\n        >\n        </button>\n    ); \n  }\n}\n//Creating Grid Class\nclass Grid extends React.Component{\n  \n  //Grid Constructor\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      player: 'red',\n      win: false,\n      boardFull: false,\n      displayMsg: '',\n      gameBoard:[\n        [null,null,null,null,null,null,null],\n        [null,null,null,null,null,null,null],\n        [null,null,null,null,null,null,null],\n        [null,null,null,null,null,null,null],\n        [null,null,null,null,null,null,null],\n        [null,null,null,null,null,null,null]\n      ]\n    };\n  }\n\n  //Method to scan the whole game board for a win or the board being full\n  boardScan(){\n    let board = this.state.gameBoard; // Whole Game Board\n    let nulls, hors, verts = 0;       // Tracking count for null, horizontal and vertical spaces\n    let currentPlayer = this.state.player;  // Tracks current player\n\n    //Counting null spaces over the board\n    for (let r = 0; r<6; r++)         // Scanning over rows\n    {\n      for (let c = 0; c<7; c++)       // Scanning over columns\n      {\n        if(board[r][c] === null){\n          nulls++;\n        }\n        //Board is full if no more null spaces are occupied\n        if (nulls === (6*7)){ \n          this.state.boardFull = true;  //Declare board full\n        }\n      }\n    }\n\n    //Scanning columns for wins\n    for(let c = 0; c <7; c++){\n      for (let r = 0; r < 6; r++)\n      {\n        if (board[r][c] === null)\n        {\n          verts = 0;\n          currentPlayer = null;\n        } else if (board[r][c] === currentPlayer) {\n          verts++;\n        } else {\n          verts = 1;\n          currentPlayer = board[r][c];\n        }\n\n        //Checking if there is a vertical win for the player \n        if(verts >=4) \n        {\n          this.state.win = true;   //Declare win\n        }\n      }\n    }\n\n    //Scanning rows for wins\n    for(let r = 0; r <6; r++)\n    {\n      for (let c = 0; c < 7; c++)\n      {\n        if (board[r][c] === null)\n        {\n          hors = 0;\n          currentPlayer = null;\n        } else if (board[r][c] === currentPlayer) {\n          hors++;\n        } else {\n          hors = 1;\n          currentPlayer = board[r][c];\n        }\n\n        //Checking for horizontal win for the player \n        if(hors >=4) \n        {\n          this.state.win = true;    //Declare win\n        }\n      }\n\n      \n    } \n  }\n\n  //Render buttons grid\n  renderButtons(){\n    \n      let btnGrid = [];\n      //Render Rows\n      for(let r = 0; r<6; r++){\n        //Renders Columns\n        for(let c = 0; c<7; c++){ \n          btnGrid.push(\n          <C4Button \n            //Keeps track of the button\n            key={r + \" \" + c}\n            //Events that are handled upon button click\n            disabled = {this.state.boardFull || this.state.win}\n                            \n            onClick  = {(e) => {\n              //Switches color to current player\n              e.target.style.backgroundColor = this.state.player;\n              //Disables ability to click button\n              e.target.disabled = true;\n\n              //Update the board tracker\n                let newBoard = this.state.gameBoard;    //Create new board variable\n                newBoard[r][c] = this.state.player;     //insert the current player state in the board\n                this.setState({gameBoard: newBoard});   //set the gameBoard as the temporary new Board variable\n\n              //Scans board for win/board fill\n              this.boardScan();\n              \n              //Checks if there is a win\n              if(this.state.win){\n                //Sends win alert message\n                alert(\"Game Over! \" + this.state.player + \" Wins!\");\n              }\n\n              if(this.state.boardFull){\n                //Sends board full alert message\n                alert(\"Game Over! The there are no more free spaces :(\");\n              }\n\n              //Change player\n              this.setState(\n                {player: this.state.player === \"red\" ? \"yellow\" : \"red\"}\n                )\n              \n            }\n            }\n          />);\n        }\n        btnGrid.push(<br key = {r + \"br\"} />);\n      }\n      return btnGrid;\n    \n  }  \n\n  render()\n  {\n    return(\n      <div>\n        {this.renderButtons()}\n      </div>\n    )\n  }\n}\nexport default Grid;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Grid from './C4';\nimport C4Button from './C4';\n\n\n\nReactDOM.render(\n  <div>\n    <h1>Connect 4 by Brandon Mendoza</h1>\n    <hr/>\n    <Grid/>\n    \n  </div>, \n  document.getElementById('root')\n);"],"sourceRoot":""}